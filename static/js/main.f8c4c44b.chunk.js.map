{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["size","points","x","y","getMiddleVal","a","b","Math","round","drawPoint","pointer","ctx","width","fillStyle","fillRect","randomPoint","floor","random","length","nextPoint","setTimeout","App","canvasRef","React","useRef","appRef","useState","canvasStyle","setCanvasStyle","useEffect","current","getContext","Error","height","clientHeight","marginTop","marginLeft","clientWidth","className","ref","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAGMA,EAAO,KACPC,EAAS,CACb,CAACC,EAAG,EAAGC,EAAGH,GACV,CAACE,EAAGF,IAAUG,EAAG,GACjB,CAACD,EAAGF,EAAMG,EAAGH,IAEf,SAASI,EAAcC,EAAWC,GAChC,OAAOC,KAAKC,OAAOF,EAAID,GAAK,EAAIA,G,SAGnBI,E,kFAAf,WAAyBC,EAAkCC,EAA+BC,GAA1F,iBAAAP,EAAA,sDACEM,EAAIE,UAAY,QAChBF,EAAIG,SAASJ,EAAQR,EAAI,EAAGQ,EAAQP,EAAI,EAAG,EAAG,GAExCY,EAAcd,EAAOM,KAAKS,MAAMT,KAAKU,SAAWhB,EAAOiB,SACvDC,EAAY,CAACjB,EAAGE,EAAaM,EAAQR,EAAGa,EAAYb,GAAIC,EAAGC,EAAaM,EAAQP,EAAGY,EAAYZ,IAErGiB,YAAW,kBAAMX,EAAUU,EAAWR,EAAKC,KAAQ,IAPrD,4C,sBAyCeS,MA/Bf,WACE,IAAMC,EAAYC,IAAMC,OAAiC,MACnDC,EAASF,IAAMC,OAA8B,MAFtC,EAIyBD,IAAMG,SAA8B,IAJ7D,mBAINC,EAJM,KAIOC,EAJP,KAwBb,OAlBAL,IAAMM,WAAU,WACd,GAAyB,MAArBP,EAAUQ,SACQ,MAAlBL,EAAOK,QAAX,CAEA,IAAMnB,EAAMW,EAAUQ,QAAQC,WAAW,MACzC,GAAW,MAAPpB,EAAa,MAAM,IAAIqB,MAAM,MAEjCJ,EAAe,CACbK,OAAQR,EAAOK,QAAQI,aAAe,GACtCC,UAAW,GACXvB,MAAOa,EAAOK,QAAQI,aAAe,GACrCE,YAAaX,EAAOK,QAAQO,YAAcZ,EAAOK,QAAQI,aAAe,IAAM,IAGhFzB,EAAU,CAACP,EAAG,EAAGC,EAAGH,GAAOW,EAAKW,EAAUQ,QAAQlB,UAEjD,CAACU,EAAWG,IAGb,qBAAKa,UAAU,MAAMC,IAAKd,EAA1B,SACE,wBAAQc,IAAKjB,EAAWV,MAAOZ,EAAMiC,OAAQjC,EAAMwC,MAAOb,OCnCjDc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8c4c44b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst size = 1200;\nconst points = [\n  {x: 0, y: size},\n  {x: size / 2, y: 0},\n  {x: size, y: size},\n]\nfunction getMiddleVal (a: number, b: number): number {\n  return Math.round((b - a) / 2 + a);\n}\n\nasync function drawPoint(pointer: {x: number; y: number;}, ctx: CanvasRenderingContext2D, width: number ): Promise<void> {\n  ctx.fillStyle = 'black';\n  ctx.fillRect(pointer.x - 1, pointer.y - 1, 3, 3);\n\n  const randomPoint = points[Math.floor(Math.random() * points.length)];\n  const nextPoint = {x: getMiddleVal(pointer.x, randomPoint.x), y: getMiddleVal(pointer.y, randomPoint.y)};\n\n  setTimeout(() => drawPoint(nextPoint, ctx, width), 0.1);\n}\n\nfunction App() {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n  const appRef = React.useRef<HTMLDivElement | null>(null);\n\n  const [canvasStyle, setCanvasStyle] = React.useState<React.CSSProperties>({});\n\n  React.useEffect(() => {\n    if (canvasRef.current == null) return;\n    if (appRef.current == null) return;\n\n    const ctx = canvasRef.current.getContext('2d');\n    if (ctx == null) throw new Error(':(');\n\n    setCanvasStyle({\n      height: appRef.current.clientHeight - 32,\n      marginTop: 16,\n      width: appRef.current.clientHeight - 32,\n      marginLeft: (appRef.current.clientWidth - appRef.current.clientHeight + 32) / 2,\n    })\n\n    drawPoint({x: 0, y: size}, ctx, canvasRef.current.width);\n\n  }, [canvasRef, appRef])\n\n  return (\n    <div className=\"App\" ref={appRef}>\n      <canvas ref={canvasRef} width={size} height={size} style={canvasStyle}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}